@using Microsoft.AspNetCore.Components
@using MoneyChanger.Data 

@inject Config config

<!-- ======= Hero Section ======= -->
<section id="hero" style="margin-top: 50px;">

    <div class="container">
        <div class="row">
            <div class="col-xl-6 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up">
                <h3 style="color: #00529C;">Please Insert Your Passport</h3>
                <table style="margin-top: 9%;">
                    <tr>
                        <td><h3 style="font-weight: bold;"> e-KTP No </h3></td>
                        <td><h3 style="font-weight: bold;">:&emsp;</h3></td>
                        <td><h3 style="font-weight: bold;">02480327487328</h3><br></td>
                    </tr>
                    <tr>
                        <td><h3 style="font-weight: bold;"> Full Name</h3></td>
                        <td><h3 style="font-weight: bold;">:</h3></td>
                        <td><h3 style="font-weight: bold;">Bambang Pamungkas</h3><br></td>
                    </tr>
                    <tr>
                        <td><h3 style="font-weight: bold;"> Nationality</h3></td>
                        <td><h3 style="font-weight: bold;">:</h3></td>
                        <td><h3 style="font-weight: bold;">Indonesia</h3><br></td>
                    </tr>
                </table>
            </div>
            <div class="col-xl-6 order-1 order-lg-2 hero-img" data-aos="fade-left">
                <img src="assets/img/insert-ktp.png" class="img-fluid" alt="">
            </div>
        </div>
    </div>
</section>
<!-- End Hero -->

<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;" @onclick="MenuVerification">Back</button>
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            <ol class="track-progress" style="margin-left: 0%; margin-bottom: 2%;">
                <li class="done">
                    <em>1</em>
                    <span>Currency</span>
                </li>
                <li class="done">
                    <em>2</em>
                    <span>T & C</span>
                </li>
                <li class="done">
                    <em>3</em>
                    <span>Menu</span>
                </li>
                <li class="done">
                    <em>4</em>
                    <span>Verification</span>
                </li>
                <li class="todo">
                    <em>5</em>
                    <span>Insert Money</span>
                </li>
                <li class="todo">
                    <em>6</em>
                    <span>Done</span>
                </li>
            </ol>
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <button type="button" class="btn btn-primary" style="float: right;" @onclick="InsertMoney">Continue</button>
        </div>
    </div>
</footer><!-- End Footer -->

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }
    private IntPtr hcontext = IntPtr.Zero;
    byte[] pbPcid;
    byte[] pbConf;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);

        pbPcid = EKTP_Utility.StringToByte(EKTP_Utility.StringInsert(config.Read("EKTP", Config.PARAM_EKTP_PCID)));
        pbConf = EKTP_Utility.StringToByte(EKTP_Utility.StringInsert(config.Read("EKTP", Config.PARAM_EKTP_PCID)));

        Console.WriteLine("READ CID AND CONFIG SUCCESS");
    }

    private async Task scanKtp()
    {
        if(EKtp_Sdk.EktpEstablishContext(ref hcontext) == 0)
        {
            Console.WriteLine("EKTP ESTABLISH CONTEXT SUCCESS");
            EKtp_Sdk.EktpSetAttrib(hcontext, EKtp_Sdk.EKTP_ATTR_PCID, pbPcid, pbPcid.Length);
            EKtp_Sdk.EktpSetAttrib(hcontext, EKtp_Sdk.EKTP_ATTR_CONFIG, pbConf, pbConf.Length);
            Console.WriteLine("EKTP SET ATTRIBUT SUCCESS");
        }
        await Task.Run(() => EKtp_Sdk.EktpConnect(ref hcontext, pbPcid, pbPcid.Length, pbConf, pbConf.Length));

        int length = 2048;
        byte[] tempbuffer = new byte[length];
        int ret = -1;
        ret = await Task.Run(() => EKtp_Sdk.ReadDemographic(hcontext, ref length, tempbuffer)).ConfigureAwait(false);
        if (length == 0 || ret != 0)
        {
            Console.WriteLine("READ DEMOGRAPHIC FAILED");
        }
        byte[] demographic = new byte[length];
        for(int i = 0; i < length; i++)
        {
            demographic[i] = tempbuffer[i];
        }
        Console.WriteLine("READ DEMOGRAPHIC SUCCESS");

    }

    private void MenuVerification()
    {
        OnClick.InvokeAsync("menuverification");
    }

    private void InsertMoney()
    {
        OnClick.InvokeAsync("insertmoneyektp");
    }

}
