@using Microsoft.AspNetCore.Components
@using System.IO 
@using System.Threading  
@using MoneyChanger.Data

@inject BillAcceptor acceptor
@inject Transaksi transaksi
@inject TimerSet timer  
@inject CashDispenser cashdispenser
@inject Config config

<!-- ======= Hero Section ======= -->
<section id="hero">

    <div class="container">
        <div class="row">
            <div class="col-xl-12 order-2 order-lg-1 hero-img justify-content-center" data-aos="fade-up">
                <div>
                    <h3 style="color: #00529C; text-align: center; margin-top: -2rem;">Please Insert foreign banknotes to the banknotes slit below one by one</h3>
                    <h3 style="color: #fa2828; text-align: center;">Once you insert a foreign banknote, it cannot be returned</h3>
                </div>
            </div>

            <div class="col-xl-6 pt-5 pt-lg-0 order-1 order-lg-2 d-flex flex-column justify-content-center" data-aos="fade-right" style="margin-top: 1%;">
                <small class="text-muted" style="color: #455F76; font-size: 25px; font-weight: 500;">From</small>
                <table class="table">
                    <thead>
                        <tr style="font-weight: bold;">
                            <th scope="col">PCS</th>
                            <th scope="col">Code Currency</th>
                            <th scope="col">BankNote</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (dynamic lacc in transaksi.listacceptor)
                        {
                            <tr>
                                <th scope="row">@lacc.Count.ToString()</th>
                                <th>@lacc.Type</th>
                                <th>@lacc.Value</th>
                            </tr>
                        }
                        @*<tr>
            <th scope="row">@jumlahlembar</th>
            <td>@tipeuang</td>
            <td>@nilaiuang</td>
        </tr>
        <tr>
            <th scope="row"></th>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <th scope="row"></th>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <th scope="row"></th>
            <td></td>
            <td></td>
        </tr>*@
                        @*<tr style="background-color: rgb(219, 219, 219); font-weight: bold;">
                            <th scope="row">Total</th>
                            <td>
                                <ul style="color: black;">@tipeuang @nilaiuang</ul>
                                <ul style="color: black;"></ul>
                            </td>
                            <td>
                                <ul style="color: black;"></ul>
                                <ul style="color: black;"></ul>
                            </td>
                        </tr>*@
                    </tbody>
                </table>

            </div>
            <div class="col-xl-6 pt-5 pt-lg-0 order-1 order-lg-3 d-flex flex-column" data-aos="fade-left" style="margin-top: 1%;">
                <small class="text-muted" style="color: #455F76; font-size: 25px; font-weight: 500;">To</small>
                <table class="table">
                    <thead>
                        <tr style="font-weight: bold;">
                            <th scope="col">Code Currency</th>
                            <th scope="col">Amount Received</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row">IDR</th>
                            <td>Rp @transaksi.totalcash</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <hr>
        </div>
    </div>
</section>
<!-- End Hero -->

<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;" @onclick="Passport">Back</button>
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            <ol class="track-progress" style="margin-left: 0%; margin-bottom: 2%;">
                <li class="done">
                    <em>1</em>
                    <span>Currency</span>
                </li>
                <li class="done">
                    <em>2</em>
                    <span>T & C</span>
                </li>
                <li class="done">
                    <em>3</em>
                    <span>Menu</span>
                </li>
                <li class="done">
                    <em>4</em>
                    <span>Verification</span>
                </li>
                <li class="done">
                    <em>5</em>
                    <span>Insert Money</span>
                </li>
                <li class="todo">
                    <em>6</em>
                    <span>Done</span>
                </li>
            </ol>
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <button type="button" class="btn btn-primary" style="float: right;" @onclick="TransactionConfirmation">Continue</button>
        </div>
    </div>
</footer><!-- End Footer -->

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private string datatext;
    private static string datapath = @"C:\PercobaanNulisLog\NulisLogData.txt";
    private string[] data;
    private int jumlahlembar = 0;
    private string tipeuang = string.Empty;
    private string nilaiuang = string.Empty;
    private int totaluang;
    private bool readflag = false;
    private int time = 1000;
    private bool loopBill = false;
    private string readPort;
    private int Port;

    private string readEur;
    private string readAud;
    private string readCny;
    private string readSgd;
    private string readUsd;
    private string readThb;
    private string readKrw;
    private string readMyr;
    private string readGbp;
    private string readJpy;
    private string readHkd;
    private string readTwd;

    protected override async Task OnInitializedAsync()
    {
        //readflag = true;
        //timer.SetTimer(time);
        //timer.onelapsed += TimeHandle;
        await Task.Delay(2000);

        readEur = transaksi.converter[0];
        readAud = transaksi.converter[1];
        readCny = transaksi.converter[2];
        readSgd = transaksi.converter[3];
        readUsd = transaksi.converter[4];
        readThb = transaksi.converter[5];
        readKrw = transaksi.converter[6];
        readMyr = transaksi.converter[7];
        readGbp = transaksi.converter[8];
        readJpy = transaksi.converter[9];
        readHkd = transaksi.converter[10];
        readTwd = transaksi.converter[11];

        readPort = config.Read("PORT", Config.PARAM_PORT_CASH_DISPENSER);
        Port = ushort.Parse(readPort);
        cashdispenser.PortOpen(Port);
        cashdispenser.Reset();
        cashdispenser.Config();

        totaluang = 0;
        transaksi.AddTotalCash(totaluang.ToString());
        loopBill = true;
        await BillAcceptor();
    }

    private async Task BillAcceptor()
    {
        do
        {
            await Task.Delay(200);
            datatext = File.ReadAllText(datapath);
            if (datatext != "")
            {
                data = datatext.Split(",");
                for (int i = 0; i < data.Length; i++)
                {
                    if (i == 0)
                        tipeuang = data[i];
                    else if (i == 1)
                        //nilaiuang = data[i].Substring(0,data[i].IndexOf("\r"));
                        nilaiuang = data[i];
                }
                transaksi.AddListAcceptor(tipeuang, nilaiuang);
                File.WriteAllText(datapath, "");

                totaluang = ConvertCash(tipeuang, nilaiuang);
                transaksi.AddTotalCash(totaluang.ToString());
                StateHasChanged();
            }
        } while (loopBill);
    }

    private int ConvertCash(string strtipe, string strnilai)
    {
        int result;
        int conversion = 0;
        int converter = Convert.ToInt32(strnilai);
        switch (strtipe)
        {
            case "USD":
                {
                    conversion = Convert.ToInt32(readUsd);
                    converter = converter * conversion;
                    //convert = convert * 14000;
                    break;
                }
            case "EUR":
                {
                    conversion = Convert.ToInt32(readEur);
                    converter = converter * conversion;
                    //convert = convert * 16000;
                    break;
                }
            case "JPY":
                {
                    conversion = Convert.ToInt32(readJpy);
                    converter = converter * conversion;
                    //convert = convert * 132;
                    break;
                }
            case "CNY":
                {
                    conversion = Convert.ToInt32(readCny);
                    converter = converter * conversion;
                    //convert = convert * 2000;
                    break;
                }
            case "GBP":
                {
                    conversion = Convert.ToInt32(readGbp);
                    converter = converter * conversion;
                    //convert = convert * 18000;
                    break;
                }
            case "AUD":
                {
                    conversion = Convert.ToInt32(readAud);
                    converter = converter * conversion;
                    //convert = convert * 10000;
                    break;
                }
            case "TWD":
                {
                    conversion = Convert.ToInt32(readTwd);
                    converter = converter * conversion;
                    //convert = convert * 477;
                    break;
                }
            case "KRW":
                {
                    conversion = Convert.ToInt32(readKrw);
                    converter = converter * conversion;
                    //convert = convert * 282;
                    break;
                }
            case "HKD":
                {
                    conversion = Convert.ToInt32(readHkd);
                    converter = converter * conversion;
                    //convert = convert * 2000;
                    break;
                }
            case "SGD":
                {
                    conversion = Convert.ToInt32(readSgd);
                    converter = converter * conversion;
                    //convert = convert * 10000;
                    break;
                }
            case "MYR":
                {
                    conversion = Convert.ToInt32(readMyr);
                    converter = converter * conversion;
                    //convert = convert * 3300;
                    break;
                }
            case "THB":
                {
                    conversion = Convert.ToInt32(readThb);
                    converter = converter * conversion;
                    //convert = convert * 453;
                    break;
                }
        }
        totaluang += converter;
        result = totaluang;
        return result;
    }

    //private void TimeHandle()
    //{
    //    if (readflag)
    //    {
    //        Console.WriteLine("TIMER REFRESH");
    //        InvokeAsync(StateHasChanged);
    //        //totaluang = transaksi.totalcash;
    //        //ConvertCash();
    //        //OnClick.InvokeAsync("insertmoney");
    //    }
    //}

    private async Task Passport()
    {
        loopBill = false;
        OnClick.InvokeAsync("passport");
        //flag = false;
    }

    private async Task TransactionConfirmation()
    {
        loopBill = false;
        OnClick.InvokeAsync("transactionconfirmation");
        //flag = false;
    }
}
